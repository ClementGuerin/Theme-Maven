/* Variables */

$primary-bg-color : #191c2d;
$secondary-bg-color : #1c2033;

$selected-color : #2b46ed;
$selected-color-hover : #1a2ea9;

$border-radius : 5px;
$transition : 0.25s;

/* Mixins */


@mixin box-shadow() {
    box-shadow: 0px 1px 30px 0px rgba(0, 0, 0, 0.25);
}

// Use : @include box-shadow();

@mixin blue-gradient() {
    background: -moz-linear-gradient(top, rgba(43,70,237,0) 0%, rgba(43,69,237,0.3) 100%);
    background: -webkit-gradient(left top, left bottom, color-stop(0%, rgba(43,70,237,0)), color-stop(100%, rgba(43,69,237,0.3)));
    background: -webkit-linear-gradient(top, rgba(43,70,237,0) 0%, rgba(43,69,237,0.3) 100%);
    background: -o-linear-gradient(top, rgba(43,70,237,0) 0%, rgba(43,69,237,0.3) 100%);
    background: -ms-linear-gradient(top, rgba(43,70,237,0) 0%, rgba(43,69,237,0.3) 100%);
    background: linear-gradient(to bottom, rgba(43,70,237,0) 0%, rgba(43,69,237,0.3) 100%);
}

// Use : @include blue-gradient();


/* Classes */

.btn-theme{
    padding: 13px 25px;
    background: $selected-color;
    font-family: 'Pangram Medium';
    font-size: 16px;
    color: #fff;
    border-radius: $border-radius;
    transition: $transition;
    cursor: pointer;
    text-decoration: none;
    display: inline-block;
}

.btn-theme:hover{
    background: $selected-color-hover;
    text-decoration: none;
    color: #fff;
}

.container-theme{
    background: $secondary-bg-color;
    border-radius: $border-radius;
    padding: 20px;
    @include box-shadow();
    color: #fff;
}

//
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
    xs: 576px,
    sm: 768px,
    md: 992px,
    lg: 1200px
);


//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {

        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (min-width: $breakpoint-value) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    } @else {

        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}


//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {

        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    } @else {

        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

    // If both the lower and upper breakpoints exist in the map.
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

        // Get the lower and upper breakpoints.
        $lower-breakpoint: map-get($breakpoints, $lower);
        $upper-breakpoint: map-get($breakpoints, $upper);

        // Write the media query.
        @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
            @content;
        }

        // If one or both of the breakpoints don't exist.
    } @else {

        // If lower breakpoint is invalid.
        @if (map-has-key($breakpoints, $lower) == false) {

            // Log a warning.
            @warn 'Your lower breakpoint was invalid: #{$lower}.';
        }

        // If upper breakpoint is invalid.
        @if (map-has-key($breakpoints, $upper) == false) {

            // Log a warning.
            @warn 'Your upper breakpoint was invalid: #{$upper}.';
        }
    }
}